// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: medicine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedicineClient is the client API for Medicine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicineClient interface {
	SearchMedicine(ctx context.Context, in *MedicineSearchRequest, opts ...grpc.CallOption) (*MedicineSearchResponse, error)
	SubmitPrescription(ctx context.Context, in *PrescriptionRequest, opts ...grpc.CallOption) (*PrescriptionResponse, error)
}

type medicineClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicineClient(cc grpc.ClientConnInterface) MedicineClient {
	return &medicineClient{cc}
}

func (c *medicineClient) SearchMedicine(ctx context.Context, in *MedicineSearchRequest, opts ...grpc.CallOption) (*MedicineSearchResponse, error) {
	out := new(MedicineSearchResponse)
	err := c.cc.Invoke(ctx, "/Medicine/searchMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicineClient) SubmitPrescription(ctx context.Context, in *PrescriptionRequest, opts ...grpc.CallOption) (*PrescriptionResponse, error) {
	out := new(PrescriptionResponse)
	err := c.cc.Invoke(ctx, "/Medicine/submitPrescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicineServer is the server API for Medicine service.
// All implementations must embed UnimplementedMedicineServer
// for forward compatibility
type MedicineServer interface {
	SearchMedicine(context.Context, *MedicineSearchRequest) (*MedicineSearchResponse, error)
	SubmitPrescription(context.Context, *PrescriptionRequest) (*PrescriptionResponse, error)
	mustEmbedUnimplementedMedicineServer()
}

// UnimplementedMedicineServer must be embedded to have forward compatible implementations.
type UnimplementedMedicineServer struct {
}

func (UnimplementedMedicineServer) SearchMedicine(context.Context, *MedicineSearchRequest) (*MedicineSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMedicine not implemented")
}
func (UnimplementedMedicineServer) SubmitPrescription(context.Context, *PrescriptionRequest) (*PrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPrescription not implemented")
}
func (UnimplementedMedicineServer) mustEmbedUnimplementedMedicineServer() {}

// UnsafeMedicineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicineServer will
// result in compilation errors.
type UnsafeMedicineServer interface {
	mustEmbedUnimplementedMedicineServer()
}

func RegisterMedicineServer(s grpc.ServiceRegistrar, srv MedicineServer) {
	s.RegisterService(&Medicine_ServiceDesc, srv)
}

func _Medicine_SearchMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServer).SearchMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Medicine/searchMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServer).SearchMedicine(ctx, req.(*MedicineSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medicine_SubmitPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServer).SubmitPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Medicine/submitPrescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServer).SubmitPrescription(ctx, req.(*PrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Medicine_ServiceDesc is the grpc.ServiceDesc for Medicine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Medicine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Medicine",
	HandlerType: (*MedicineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchMedicine",
			Handler:    _Medicine_SearchMedicine_Handler,
		},
		{
			MethodName: "submitPrescription",
			Handler:    _Medicine_SubmitPrescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medicine.proto",
}
